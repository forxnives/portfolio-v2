---
import ResponsiveToggle from "./ResponsiveToggle.astro"
import { DarkMode } from "accessible-astro-components"
---

<div>
	<div
		id="main-navigation"
		class="is-desktop borderBlue absolute z-40 w-full py-6 transition-all"
	>
		<div class="container">
			<a href="/" class="flex items-center gap-2 !no-underline">
				<svg
					width="36"
					height="32"
					viewBox="0 0 36 32"
					fill="currentColor"
					xmlns="http://www.w3.org/2000/svg"
				>
					<path
						d="M24.8384 15.7946C26.1824 15.9701 27.1164 16.6154 27.6404 17.7307C28.2564 19.0408 28.5924 19.7369 28.6484 19.8188C30.7164 22.9539 32.6924 26.1494 34.5764 29.4054C34.5962 29.439 34.6064 29.4771 34.6059 29.5159C34.6054 29.5547 34.5944 29.5928 34.5737 29.6265C34.5531 29.6602 34.5237 29.6882 34.4884 29.7079C34.4531 29.7276 34.4131 29.7383 34.3724 29.7388H31.5224C31.4121 29.7388 31.3032 29.7116 31.2058 29.6595C31.1083 29.6074 31.0253 29.5321 30.9644 29.4405C29.2124 26.707 27.5064 23.9541 25.8464 21.1816C24.5564 19.035 23.5064 18.1342 21.3764 20.2808C20.7404 20.9281 20.6124 21.5735 20.9924 22.2169C22.4084 24.6033 23.8404 26.9858 25.2884 29.3644C25.3117 29.4026 25.3243 29.4462 25.3247 29.4906C25.3252 29.5351 25.3135 29.5789 25.2909 29.6175C25.2684 29.6562 25.2357 29.6883 25.1963 29.7106C25.1568 29.7329 25.112 29.7447 25.0664 29.7446L22.3184 29.7505C22.0584 29.7505 21.8624 29.6432 21.7304 29.4288L11.6384 13.1801C11.5144 12.9812 11.5164 12.7824 11.6444 12.5835L17.8184 2.76292C17.9504 2.55235 18.0824 2.5543 18.2144 2.76877L24.3704 12.6595C24.449 12.7857 24.4905 12.9314 24.4904 13.0807L24.4784 15.391C24.4744 15.6289 24.5944 15.7634 24.8384 15.7946ZM18.0704 8.53009C18.0522 8.50105 18.0266 8.47706 17.9961 8.46042C17.9657 8.44377 17.9313 8.43503 17.8964 8.43503C17.8615 8.43503 17.8271 8.44377 17.7967 8.46042C17.7662 8.47706 17.7406 8.50105 17.7224 8.53009L15.0644 12.7239C15.0444 12.7542 15.0333 12.7894 15.0323 12.8254C15.0312 12.8615 15.0403 12.8971 15.0584 12.9286L18.4244 18.4793C18.4408 18.5065 18.4637 18.5295 18.491 18.5464C18.5184 18.5633 18.5495 18.5736 18.5817 18.5765C18.614 18.5793 18.6464 18.5747 18.6765 18.5628C18.7065 18.551 18.7332 18.5324 18.7544 18.5086L22.0004 14.8646C22.0294 14.8332 22.0474 14.7935 22.0517 14.7515C22.056 14.7094 22.0464 14.6671 22.0244 14.6307L18.0704 8.53009Z"
						fill="currentColor"></path>
					<path
						d="M8.39966 24.2233L8.02766 24.5274C7.83166 24.6912 7.79766 24.8823 7.92566 25.1006L10.5297 29.4231C10.5512 29.4571 10.563 29.496 10.5638 29.536C10.5645 29.5759 10.5542 29.6153 10.534 29.65C10.5137 29.6847 10.4842 29.7135 10.4486 29.7333C10.413 29.753 10.3726 29.7631 10.3317 29.7623L7.54166 29.7448C7.44188 29.7432 7.34433 29.7158 7.25895 29.6655C7.17356 29.6151 7.10342 29.5436 7.05566 29.4582L4.51766 25.0597C4.42966 24.9076 4.43166 24.7575 4.52366 24.6093L10.7157 14.432C10.7289 14.4101 10.7478 14.3921 10.7704 14.3795C10.7931 14.367 10.8186 14.3604 10.8447 14.3604C10.8707 14.3604 10.8963 14.367 10.9189 14.3795C10.9415 14.3921 10.9604 14.4101 10.9737 14.432L20.1237 29.4699C20.1403 29.498 20.1492 29.5299 20.1494 29.5624C20.1496 29.5949 20.1411 29.6269 20.1248 29.6553C20.1084 29.6836 20.0848 29.7073 20.0562 29.724C20.0276 29.7407 19.995 29.7499 19.9617 29.7506H16.9197C16.8433 29.7507 16.7682 29.7313 16.7019 29.6944C16.6356 29.6574 16.5804 29.6043 16.5417 29.5401L11.1177 20.5384C11.0676 20.4536 10.9862 20.3903 10.8896 20.3611C10.793 20.3319 10.6881 20.3388 10.5957 20.3805C10.4077 20.4701 10.2977 20.6183 10.2657 20.825C10.2377 20.981 10.2897 21.1642 10.4217 21.3748C12.1017 24.0537 13.7557 26.7481 15.3837 29.4582C15.5157 29.6727 15.4537 29.7779 15.1977 29.774L12.4317 29.7389C12.1837 29.735 11.9977 29.6278 11.8737 29.4172L8.85566 24.2993C8.73566 24.0966 8.58366 24.0712 8.39966 24.2233Z"
						fill="currentColor"></path>
					<path
						d="M4.07377 25.9899L5.92177 29.4877C5.93598 29.515 5.94285 29.5454 5.94172 29.5761C5.94059 29.6067 5.93152 29.6366 5.91533 29.6629C5.89915 29.6892 5.87639 29.711 5.84919 29.7264C5.82198 29.7418 5.79122 29.7502 5.75977 29.7509L1.72177 29.745C1.68911 29.7445 1.65717 29.7355 1.62918 29.7191C1.60118 29.7027 1.57812 29.6794 1.56231 29.6515C1.54649 29.6236 1.53849 29.5922 1.53909 29.5604C1.5397 29.5285 1.5489 29.4974 1.56577 29.4701L3.74977 25.9782C3.767 25.9508 3.79142 25.9283 3.8205 25.9131C3.84959 25.8979 3.8823 25.8905 3.91528 25.8917C3.94826 25.8929 3.98032 25.9026 4.00817 25.9199C4.03602 25.9372 4.05866 25.9613 4.07377 25.9899Z"
						fill="currentColor"></path>
				</svg>
			</a>
			<div class="wrapper">
				<nav class="desktop-menu" aria-label="Main navigation desktop">
					<ul class="menu">
						<slot />
					</ul>
				</nav>
				<DarkMode />
				<ResponsiveToggle />
			</div>
			<nav class="mobile-menu" aria-label="Main navigation mobile">
				<ul class="menu">
					<slot />
				</ul>
			</nav>
		</div>
	</div>
	<!-- <div
		id="main-navigation"
		class="is-desktop borderPink w-full py-6 opacity-0 transition-all"
	>
		<div class="container">
			<a href="/" class="flex items-center gap-2 !no-underline">
				<svg
					width="36"
					height="32"
					viewBox="0 0 36 32"
					fill="currentColor"
					xmlns="http://www.w3.org/2000/svg"
				>
					<path
						d="M24.8384 15.7946C26.1824 15.9701 27.1164 16.6154 27.6404 17.7307C28.2564 19.0408 28.5924 19.7369 28.6484 19.8188C30.7164 22.9539 32.6924 26.1494 34.5764 29.4054C34.5962 29.439 34.6064 29.4771 34.6059 29.5159C34.6054 29.5547 34.5944 29.5928 34.5737 29.6265C34.5531 29.6602 34.5237 29.6882 34.4884 29.7079C34.4531 29.7276 34.4131 29.7383 34.3724 29.7388H31.5224C31.4121 29.7388 31.3032 29.7116 31.2058 29.6595C31.1083 29.6074 31.0253 29.5321 30.9644 29.4405C29.2124 26.707 27.5064 23.9541 25.8464 21.1816C24.5564 19.035 23.5064 18.1342 21.3764 20.2808C20.7404 20.9281 20.6124 21.5735 20.9924 22.2169C22.4084 24.6033 23.8404 26.9858 25.2884 29.3644C25.3117 29.4026 25.3243 29.4462 25.3247 29.4906C25.3252 29.5351 25.3135 29.5789 25.2909 29.6175C25.2684 29.6562 25.2357 29.6883 25.1963 29.7106C25.1568 29.7329 25.112 29.7447 25.0664 29.7446L22.3184 29.7505C22.0584 29.7505 21.8624 29.6432 21.7304 29.4288L11.6384 13.1801C11.5144 12.9812 11.5164 12.7824 11.6444 12.5835L17.8184 2.76292C17.9504 2.55235 18.0824 2.5543 18.2144 2.76877L24.3704 12.6595C24.449 12.7857 24.4905 12.9314 24.4904 13.0807L24.4784 15.391C24.4744 15.6289 24.5944 15.7634 24.8384 15.7946ZM18.0704 8.53009C18.0522 8.50105 18.0266 8.47706 17.9961 8.46042C17.9657 8.44377 17.9313 8.43503 17.8964 8.43503C17.8615 8.43503 17.8271 8.44377 17.7967 8.46042C17.7662 8.47706 17.7406 8.50105 17.7224 8.53009L15.0644 12.7239C15.0444 12.7542 15.0333 12.7894 15.0323 12.8254C15.0312 12.8615 15.0403 12.8971 15.0584 12.9286L18.4244 18.4793C18.4408 18.5065 18.4637 18.5295 18.491 18.5464C18.5184 18.5633 18.5495 18.5736 18.5817 18.5765C18.614 18.5793 18.6464 18.5747 18.6765 18.5628C18.7065 18.551 18.7332 18.5324 18.7544 18.5086L22.0004 14.8646C22.0294 14.8332 22.0474 14.7935 22.0517 14.7515C22.056 14.7094 22.0464 14.6671 22.0244 14.6307L18.0704 8.53009Z"
						fill="currentColor"></path>
					<path
						d="M8.39966 24.2233L8.02766 24.5274C7.83166 24.6912 7.79766 24.8823 7.92566 25.1006L10.5297 29.4231C10.5512 29.4571 10.563 29.496 10.5638 29.536C10.5645 29.5759 10.5542 29.6153 10.534 29.65C10.5137 29.6847 10.4842 29.7135 10.4486 29.7333C10.413 29.753 10.3726 29.7631 10.3317 29.7623L7.54166 29.7448C7.44188 29.7432 7.34433 29.7158 7.25895 29.6655C7.17356 29.6151 7.10342 29.5436 7.05566 29.4582L4.51766 25.0597C4.42966 24.9076 4.43166 24.7575 4.52366 24.6093L10.7157 14.432C10.7289 14.4101 10.7478 14.3921 10.7704 14.3795C10.7931 14.367 10.8186 14.3604 10.8447 14.3604C10.8707 14.3604 10.8963 14.367 10.9189 14.3795C10.9415 14.3921 10.9604 14.4101 10.9737 14.432L20.1237 29.4699C20.1403 29.498 20.1492 29.5299 20.1494 29.5624C20.1496 29.5949 20.1411 29.6269 20.1248 29.6553C20.1084 29.6836 20.0848 29.7073 20.0562 29.724C20.0276 29.7407 19.995 29.7499 19.9617 29.7506H16.9197C16.8433 29.7507 16.7682 29.7313 16.7019 29.6944C16.6356 29.6574 16.5804 29.6043 16.5417 29.5401L11.1177 20.5384C11.0676 20.4536 10.9862 20.3903 10.8896 20.3611C10.793 20.3319 10.6881 20.3388 10.5957 20.3805C10.4077 20.4701 10.2977 20.6183 10.2657 20.825C10.2377 20.981 10.2897 21.1642 10.4217 21.3748C12.1017 24.0537 13.7557 26.7481 15.3837 29.4582C15.5157 29.6727 15.4537 29.7779 15.1977 29.774L12.4317 29.7389C12.1837 29.735 11.9977 29.6278 11.8737 29.4172L8.85566 24.2993C8.73566 24.0966 8.58366 24.0712 8.39966 24.2233Z"
						fill="currentColor"></path>
					<path
						d="M4.07377 25.9899L5.92177 29.4877C5.93598 29.515 5.94285 29.5454 5.94172 29.5761C5.94059 29.6067 5.93152 29.6366 5.91533 29.6629C5.89915 29.6892 5.87639 29.711 5.84919 29.7264C5.82198 29.7418 5.79122 29.7502 5.75977 29.7509L1.72177 29.745C1.68911 29.7445 1.65717 29.7355 1.62918 29.7191C1.60118 29.7027 1.57812 29.6794 1.56231 29.6515C1.54649 29.6236 1.53849 29.5922 1.53909 29.5604C1.5397 29.5285 1.5489 29.4974 1.56577 29.4701L3.74977 25.9782C3.767 25.9508 3.79142 25.9283 3.8205 25.9131C3.84959 25.8979 3.8823 25.8905 3.91528 25.8917C3.94826 25.8929 3.98032 25.9026 4.00817 25.9199C4.03602 25.9372 4.05866 25.9613 4.07377 25.9899Z"
						fill="currentColor"></path>
				</svg>
			</a>
		</div>
	</div> -->
</div>

<script>
	document.addEventListener("astro:page-load", () => {
		// variables
		const mainNav = document.querySelector("#main-navigation")
		const mainMenu = mainNav.querySelector("ul")
		const dropdownMenus = [
			...document.querySelectorAll(".has-dropdown button"),
		]

		// functions
		const setActiveMenuItem = () => {
			const mobileDesktopMenus = mainNav.querySelectorAll("nav > ul")
			const currenPathname = window.location.pathname

			mobileDesktopMenus.forEach((menu) => {
				const menuItems = [
					...menu.querySelectorAll('a:not([rel*="external"])'),
				] as HTMLAnchorElement[]

				menuItems.forEach((menuItem) => {
					if (
						currenPathname.includes(
							menuItem.pathname.replaceAll("/", "")
						) &&
						menuItem.textContent !== "Home"
					) {
						menuItem.classList.add("is-active")
						menuItem.setAttribute("aria-current", "page")
					} else if (
						menuItem.textContent === "Home" &&
						currenPathname === "/"
					) {
						menuItem.classList.add("is-active")
						menuItem.setAttribute("aria-current", "page")
					}
				})
			})
		}

		const checkMenuSize = () => {
			const mainNavWidth = mainNav.getBoundingClientRect().width
			const desktopMenuWidth = document
				.querySelector(".desktop-menu")
				.getBoundingClientRect().width
			const logoWidthBuffer = 300
			const totalMenuWidth =
				Math.round(desktopMenuWidth) + logoWidthBuffer

			if (totalMenuWidth >= mainNavWidth) {
				mainNav.classList.remove("is-desktop")
				mainNav.classList.add("is-mobile")
			} else if (totalMenuWidth <= mainNavWidth) {
				mainNav.classList.add("is-desktop")
				mainNav.classList.remove("is-mobile")
			}
		}

		const isOutOfViewport = (element) => {
			const elementBounds = element.getBoundingClientRect()
			return (
				elementBounds.right >
				(window.innerWidth || document.documentElement.clientWidth)
			)
		}

		const openDropdownMenu = (dropdownMenu) => {
			const dropdownList = dropdownMenu.parentNode.querySelector("ul")

			dropdownMenu.classList.add("show")
			dropdownMenu.setAttribute("aria-expanded", "true")

			if (isOutOfViewport(dropdownList)) {
				dropdownList.style.left = "auto"
			}
		}

		const closeDropdownMenu = (dropdownMenu) => {
			dropdownMenu.classList.remove("show")
			dropdownMenu.setAttribute("aria-expanded", "false")
		}

		const closeAllDropdownMenus = () => {
			for (let i = 0; i < dropdownMenus.length; i++) {
				closeDropdownMenu(dropdownMenus[i])
			}
		}

		const toggleDropdownMenu = (event) => {
			if (event.target.getAttribute("aria-expanded") === "false") {
				closeAllDropdownMenus()
				openDropdownMenu(event.target)
			} else {
				closeDropdownMenu(event.target)
			}
		}

		// execution
		mainMenu &&
			mainMenu.addEventListener("keydown", (event) => {
				const element = event.target as Element
				const currentMenuItem = element.closest("li")
				const menuItems = [...mainMenu.querySelectorAll(".menu-item")]
				const currentDropdownMenu = element.closest(
					".has-dropdown button"
				)
				const currentDropdownMenuItem =
					element.closest(".has-dropdown li")
				const currentIndex = menuItems.findIndex(
					(item) => item === currentMenuItem
				)

				// document.body.classList.add('darkmode')

				const key = event.key
				let targetItem

				if (key === "ArrowRight") {
					if (
						menuItems.indexOf(currentMenuItem) ===
						menuItems.length - 1
					) {
						targetItem = menuItems[0]
					} else {
						targetItem = menuItems[currentIndex + 1]
					}
				}

				if (key === "ArrowLeft") {
					if (menuItems.indexOf(currentMenuItem) === 0) {
						targetItem = menuItems[menuItems.length - 1]
					} else {
						targetItem = menuItems[currentIndex - 1]
					}
				}

				if (key === "Escape") {
					targetItem = menuItems[0]
				}

				if (currentDropdownMenu) {
					const firstDropdownItem =
						currentDropdownMenu.nextElementSibling.querySelector(
							"li"
						)

					if (key === "ArrowDown") {
						event.preventDefault()
						openDropdownMenu(currentDropdownMenu)
						targetItem = firstDropdownItem
					}

					if (key === "Escape") {
						closeDropdownMenu(currentDropdownMenu)
					}
				}

				if (currentDropdownMenuItem) {
					const currentDropdownList =
						currentDropdownMenuItem.parentNode
					const dropdownMenuItems = [
						...currentDropdownList.querySelectorAll("li"),
					]
					const currentIndex = dropdownMenuItems.findIndex(
						(item) => item === currentDropdownMenuItem
					)

					if (key === "ArrowDown") {
						event.preventDefault()

						if (
							dropdownMenuItems.indexOf(
								currentDropdownMenuItem as HTMLLIElement
							) ===
							dropdownMenuItems.length - 1
						) {
							targetItem = dropdownMenuItems[0]
						} else {
							targetItem = dropdownMenuItems[currentIndex + 1]
						}
					}

					if (key === "ArrowUp") {
						event.preventDefault()

						if (
							dropdownMenuItems.indexOf(
								currentDropdownMenuItem as HTMLLIElement
							) === 0
						) {
							targetItem =
								dropdownMenuItems[dropdownMenuItems.length - 1]
						} else {
							targetItem = dropdownMenuItems[currentIndex - 1]
						}
					}

					if (key === "Escape") {
						const currentDropdownMenu = (
							currentDropdownList as Element
						).previousElementSibling
						targetItem = currentDropdownMenu.parentNode
						closeAllDropdownMenus()
					}
				}

				if (targetItem) {
					targetItem.querySelector("a, button, input").focus()
				}
			})

		dropdownMenus &&
			dropdownMenus.forEach((dropdownMenu) => {
				dropdownMenu.addEventListener("click", toggleDropdownMenu)
			})

		setActiveMenuItem()
		checkMenuSize()

		window.addEventListener("resize", checkMenuSize)
		window.addEventListener("click", (event) => {
			const element = event.target as Element
			if (
				!element.hasAttribute("aria-haspopup") &&
				!element.classList.contains("submenu-item")
			) {
				closeAllDropdownMenus()
			}
		})
	})
</script>

<style lang="scss" is:global>
	@use "../assets/scss/base/breakpoint" as *;
	@use "../assets/scss/base/outline" as *;

	#main-navigation {
		background-color: var(--background);

		> .container {
			display: flex;
			justify-content: space-between;
			flex-wrap: wrap;
		}

		&.is-desktop {
			.desktop-menu {
				visibility: visible;
				position: static;
			}

			.mobile-menu {
				display: none;
			}

			.darkmode-toggle {
				margin-top: -6px;
			}
		}

		&.is-mobile {
			flex-direction: column;

			.mobile-menu {
				display: none;

				&.show {
					display: block;
				}
			}

			.desktop-menu {
				visibility: hidden;
				z-index: -99;
				position: absolute;
				left: 0;
			}

			.responsive-toggle {
				display: block;
			}
		}

		.wrapper {
			display: flex;
			align-items: center;
			gap: 1rem;
		}

		.logo {
			fill: red;
		}

		nav {
			> ul {
				display: flex;
				gap: 1.5rem;
				list-style-type: none;

				a,
				button {
					text-decoration: none;
					font-size: 1.125rem;
					line-height: 1.6875rem;
				}

				a:hover,
				a:focus,
				.is-active,
				.has-dropdown > button:hover,
				.has-dropdown > button:focus {
					text-decoration: underline;
					text-decoration-thickness: 1px;
					text-decoration-style: wavy;
					text-underline-offset: 7px;
				}

				.is-active {
					font-weight: bold;
				}
			}
		}

		.mobile-menu {
			flex-basis: 100%;
			padding: 2rem 0;

			> ul {
				flex-direction: column;

				ul {
					position: relative;
					margin-top: 1rem;
				}
			}

			a,
			button {
				display: block;
				width: 100%;
				padding: 0.5rem 0;
			}
		}

		.has-dropdown {
			position: relative;

			> button {
				display: flex;
				align-items: center;
				gap: 0.5rem;
				padding: 0;
				margin-top: -1px;
				border: none;
				color: var(--action-color);

				&:hover {
					color: var(--action-color-state);

					&::after {
						border-color: var(--action-color-state);
					}
				}

				&::after {
					content: "";
					width: 0.85rem;
					height: 0.75em;
					margin-top: -0.25rem;
					border-style: solid;
					border-width: 0.2em 0.2em 0 0;
					border-color: var(--action-color);
					transform: rotate(135deg);
				}

				&.show {
					&::after {
						margin-top: 0.25rem;
						transform: rotate(-45deg);
					}

					~ ul {
						display: flex;
						flex-direction: column;
						gap: 1rem;
					}
				}
			}

			ul {
				display: none;
				position: absolute;
				z-index: 100;
				min-width: 260px;
				top: 125%;
				right: 0;
				bottom: auto;
				left: 0;
				padding: 1rem;
				background-color: var(--neutral-background);
				border: 2px solid black;
				box-shadow: 0 10px 20px rgba(0, 0, 0, 0.15);
			}
		}
	}

	.darkmode-toggle {
		padding: 0;
		border: none;

		svg {
			width: 30px;
			margin-top: 4px;
		}

		svg path {
			fill: var(--action-color);
		}

		&:hover {
			svg path {
				fill: var(--action-color-state);
			}
		}

		&:focus {
			@include outline;

			&:not(:focus-visible) {
				outline: none;
				box-shadow: none;
			}
		}
	}
</style>
